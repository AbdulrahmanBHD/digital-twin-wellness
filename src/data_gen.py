# -*- coding: utf-8 -*-
"""data_gen.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e136L_1a8tQAbYdf3YY2lqctpOTlK9zQ

Welcome, in this Jupyter notebook you will find the data generation code used to generate synthetic data for the [digital twin wellness project](https://github.com/AbdulrahmanBHD/digital-twin-wellness)
"""

import numpy as np
import pandas as pd

np.random.seed(42)
n = 365  # one year of data

# Generate features
#steps, exercise_mins, diet_qlt, water_l, sleep_mins, sleep_qlt,
#stress_avg, mood_avg, coffee_mg, prod_mins, screen_mins, rhr_avg
sleep_hrs = np.clip(np.random.normal(7.2, 1.2, n), 4, 10)
sleep_qlt = np.random.randint(4, 10, n)
steps = np.random.randint(1000, 20000, n)
rhr_avg = np.clip(np.random.normal(70, 8, n), 50, 90)
screen_time_hrs = np.clip(np.random.normal(5, 2.5, n), 0, 12)
water_l = np.clip(np.random.normal(2.2, 0.8, n), 0, 4)
stress_avg = np.random.randint(1, 11, n)
mood_avg = np.random.randint(1, 11, n)
caffeine_mg = np.clip(np.random.normal(120, 80, n), 0, 400)
diet_qlt = np.random.randint(1, 11, n)
prod_mins = np.random.randint(0, 480, n)
exercise_mins = np.random.randint(0, 180, n)

#Converting hours to minutes (this will also be needed for user input later)
sleep_mins = sleep_hrs * 60
screen_mins = screen_time_hrs * 60

# Normalize for scoring
def normalize(x): return (x - np.min(x)) / (np.max(x) - np.min(x))

wellness = (
    0.25*normalize(sleep_mins) + # big impact
    0.15*normalize(sleep_qlt) + # strong, but slightly less
    0.15*normalize(steps) + # physical activity
    -0.05*normalize(rhr_avg) + # higher RHR is worse
    -0.10*normalize(screen_mins) + # moderate negative
    0.05*normalize(water_l) + # hydration
    -0.15*normalize(stress_avg) + # stress destroys wellness
    0.05*normalize(mood_avg) + # mood carries over
    -0.05*normalize(caffeine_mg) + # excess caffeine penalized
    0.05*normalize(diet_qlt) + # diet quality
    0.04*normalize(prod_mins) + #productivity small positive
    0.10*normalize(exercise_mins) + # targeted exercise
    np.random.normal(0, 0.05, n) # noise
)

# TODO: Replace hand-tuned weights with ML-learned feature importances

# Scale to 0â€“100
wellness_tmrw = np.clip(100*normalize(wellness), 0, 100)

df = pd.DataFrame({
    "sleep_mins": sleep_mins,
    "sleep_qlt": sleep_qlt,
    "steps": steps,
    "rhr_avg": rhr_avg,
    "screen_mins": screen_mins,
    "water_l": water_l,
    "stress_avg": stress_avg,
    "mood_avg": mood_avg,
    "caffeine_mg": caffeine_mg,
    "diet_qlt": diet_qlt,
    "prod_mins": prod_mins,
    "exercise_mins": exercise_mins,
    "wellness_tmrw": wellness_tmrw
})

df.to_csv("/WDT/data/wellness_synthetic.csv", index=False)
print(df.head())