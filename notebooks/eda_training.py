# -*- coding: utf-8 -*-
"""EDA_Training

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nrWElzzPmujHhbyu3uRpFAzCKFOQbJMZ

In this document, we will be exploring the synthetic dataset to ensure it is suitable to mimic real world patterns, and compete with real world datasets to some degree.
Then, we will proceed to train and evaluate ML models on the data.

# Exploratory Data Analysis (EDA)

## 1. Load & Inspect
## 2. Feature Distributions
## 3. Correlations
## 4. Key Bivariate Relationships
## 5. Early Insights
"""

#1. Load & Inspect

#I will start by loading dependencies
import pandas as pd
import numpy as np
import matplotlib as plt
import seaborn as sns
import os
import sklearn

#Next, I will load the dataset as a pandas dataframe
df = pd.read_csv("/WDT/data/wellness_synthetic.csv")

#Checking head
print(df.head())

#Checking info
print(df.info())

#Now let's do some heavy EDA
sns.pairplot(df)

sns.heatmap(df.corr(), annot=True)

"""We can already see that some of the most impactful areas in order are: sleep qlt, sleep mins, and steps. This is on synthetic data, imagine what we can find from real and real-time applied digital twins?

# Training
## Predicting Wellness *Tomorrow*

### 1. Setup & Data Split
"""

# We'll use sklearn's train test functionality
from sklearn.model_selection import train_test_split
x = df.drop("wellness_tmrw", axis = 1)
y = df["wellness_tmrw"]
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)

"""### 2. Baseline Model (Linear Regression)"""

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(x_train, y_train)
lr_preds = lr.predict(x_test)

"""Decent

### 3. Advanced Model (Random Forest)
"""

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor(n_estimators=200, random_state=42)
rf.fit(x_train, y_train)
rf_preds = rf.predict(x_test)

"""### 4. Model Evaluation


"""

# LR Evaluation
from sklearn.metrics import r2_score, root_mean_squared_error
print("LR R2:", r2_score(y_test, lr_preds))
print("LR RMSE:", root_mean_squared_error(y_test, lr_preds))

# RF Evaluation
from sklearn.metrics import r2_score, root_mean_squared_error
print("RF R2:", r2_score(y_test, rf_preds))
print("RF RMSE:", root_mean_squared_error(y_test, rf_preds))

"""Surprisingly, the simpler model did better. We will explore why in a moment

### 5. Feature Importance & Interpretation
"""

#This is taken from Random Forest trained model, put into a dictionary, sorted
feat_imp = pd.DataFrame({
    "feature": x.columns,
    "importance": rf.feature_importances_
}).sort_values("importance", ascending=False)

print(feat_imp)

"""As we hypothesized, sleep quality, sleep minutes and steps are the top 3 most important general wellness factors in our synthetic dataset.
Stress average, exercise minutes and screen time minutes follow.

These key insights can be found much better for each person with their digital twin.

Interpretation:

1. Linear regression outperformed Random Forest.

Linear regression captures relationship better than RandomForest, likely because the dataset was built on linear weighted formula
2. Sleep dominates the feature importance list

both sleep_quality and sleep_mins, since sleep is the firstmost important factor for general wellness

3. Steps/Exercise also matter
While this is not unexpected, people don't usually make a correlation for exercise's effects on the next day
"""